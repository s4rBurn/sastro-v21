---
import { Markdown } from 'astro/components';
import { Prism, Code } from 'astro/components';
import BaseLayout from '../../layouts/BaseLayout.astro';

let codesnippet = `
  // In your gatsby-config.js
    plugins: [
      {
        resolve: \`gatsby-transformer-remark\`,
        options: {
          plugins: [
            \`gatsby-remark-prismjs\`,
          ],
        },
      },
    ],
  `

let layoutcode = `
  ---
  import BaseLayout from '../layouts/BaseLayout.astro';
  ---
  <BaseLayout title="New Page Template!">
    <main>
      <p>New page template!</p>
    </main>
  </BaseLayout>
`
---
<BaseLayout title = "Code Snippet Samples" >
<main>
<Markdown>
# Render Code snippets with syntax highlighting in Astro ðŸ’…

Astro supports styling your code in Markdown, via [Prism](https://prismjs.com/) using a `<Prism />` component and via [Shiki](https://shiki.matsu.io/) using a `<Code />` component. Be sure to import any Astro components you want to use: 
</Markdown>
<Prism lang="astro" code={`
---
import { Markdown, Prism, Code } from 'astro/components';
---
`} />


<Markdown>
*(Note: The use of Prism may be deprecated in the future. This page is, and will be updated as supported methods for styling your code evolve.)*

## Astro's Markdown `code` via single backticks

When writing in Markdown, short code samples typed between single backticks renders as the inline `<code>` html tag.

Astro's default starters do not include *any* styles for `<code>`, but you can add styling via css. These are the styles I have added to `global.css` for the styling you see here:

</Markdown>

<Prism lang="css" code={`
code {
  background-color: #212121; // Chosen specifically to match my prefered Shiki theme to avoid conflicts
  color: white;
  border-radius: 5px;
  padding: 0.18em 0.5em;
}
`} />

<Markdown>
## Astro's **`<Prism />`** Component

The css code above was rendered using Astro's `<Prism />` component. This component should be passed both a `lang` property and a `code` property to properly highlight code of a particular language.

Additionally, you **must** supply (via a stylesheet or an import) a [Prism Theme](https://github.com/PrismJS/prism/tree/master/themes) for syntax highlighting. The `<Prism />` component itself will only *apply style classes* to your code, but without a Prism theme to define those style classes, your code will not be styled. You can [add the theme's css file to your own code](https://www.giters.com/PrismJS/prism-themes) or use an [external link to one of the themes from an external CDN](https://cdnjs.com/libraries/prism) such as

</Markdown>

<Prism lang="html" code={`
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.24.1/themes/prism-tomorrow.css">
`} />

<Markdown>
Once you have a Prism theme downloaded or linked, you can either ... 

### 1. Type code directly into the code attribute:

</Markdown>

<Prism lang="astro" code={`
    //NB: The \` character needs to be escaped with a back slash!
    <Prism lang="js" code={\` 
    // In your gatsby-config.js
    plugins: [
      {
        resolve: \\\`gatsby-transformer-remark\\\`,
        options: {
          plugins: [
            \\\`gatsby-remark-prismjs\\\`,
          ],
        },
      },
    ],
    \`}/>
  `} />
<Markdown>
## OR

### 2. Pass a variable in to the `code` attribute of `<Prism />`

  </Markdown>
  <Prism lang="astro"  code={`
    <Prism lang="js"  code={codesnippet} />
  `} />
<Markdown>
  ### ... Combined with the following Astro front matter ...

</Markdown>
<Prism lang="astro" code={`
---
import { Prism } from 'astro/components';

let codesnippet = \`
  // In your gatsby-config.js
    plugins: [
      {
        resolve: \\\`gatsby-transformer-remark\\\`,
        options: {
          plugins: [
            \\\`gatsby-remark-prismjs\\\`,
          ],
        },
      },
    ],
  \`
---
`} />

<h3>Both methods will render ... </h3>
  <Prism lang="js"  code={codesnippet} />



 
  <Markdown>
  ## Code written in an Astro `<Markdown>` component

  Astro's built-in `<Markdown>` component uses Prism by default... but styling can be a bit hit or miss as Astro's codebase changes and we are preparing to move to Shiki as a default. (I have seen some code be highlighted, but with no indentation. I have seen indentation, but no highlighting....) So, be prepared!
  
  Code can be written inside `<Markdown></Markdown>` tags using three backticks (Note: no escape for single back ticks needed when writing code this way) or typed/passed in to a self-closing tag as a `content` attribute.
  </Markdown>

  <Prism lang="astro" code={`
  <Markdown>
    \`\`\`js
      // In your gatsby-config.js
      plugins: [
        {
          resolve: \`gatsby-transformer-remark\`,
          options: {
            plugins: [
              \`gatsby-remark-prismjs\`,
            ],
          },
        },
      ],
    \`\`\`
  </Markdown>

  <Markdown content={\`
     // In your gatsby-config.js
      plugins: [
        {
          resolve: \`gatsby-transformer-remark\`,
          options: {
            plugins: [
              \`gatsby-remark-prismjs\`,
            ],
          },
        },
      ],
  \`} />

  <Markdown content={codesnippet} />
  `} />

<h3>... and all of these will render a variation of ... </h3>
  <Markdown content={`
     // In your gatsby-config.js
      plugins: [
        {
          resolve: \`gatsby-transformer-remark\`,
          options: {
            plugins: [
              \`gatsby-remark-prismjs\`,
            ],
          },
        },
      ],
  `} />


<h2>Rendering Astro Code</h2>
<p>Yes, there's support for Astro code syntax highlighting!</p>

<p>Here's my Astro new page template:</p>


<Prism lang="astro" code={`
---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="New Page Template!">
  <main>
    <p>New page template!</p>
  </main>
</BaseLayout>
`} />


<Markdown>
... and I've rendered it by typing this:
</Markdown>
<Prism lang="astro" code={`
<Prism lang="astro" code={\`
---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="New Page Template!">
  <main>
    <p>New page template!</p>
  </main>
</BaseLayout>
\`} />
`} />

<Markdown>
## Astro's `<Code />` component (Shiki)

Astro now also supports a newer `<Code/>` component for rendering code with Shiki.

This component should be passed some `code` inline or via a variable defined in front matter, a `lang` and optionally, a `theme`.
</Markdown>

<Prism lang="astro" code={`
---
import { Code } from 'astro/components';
let layoutcode = \`
  ---
  import BaseLayout from '../layouts/BaseLayout.astro';
  ---
  <BaseLayout title="New Page Template!">
    <main>
      <p>New page template!</p>
    </main>
  </BaseLayout>
\`
---
<Code lang="astro" theme="material-darker" code={layoutcode} />
`} />
<h3>... renders as ...</h3>
<Code code={layoutcode} lang="astro" theme="material-darker" />
<p>But I'd LOVE to figure out why I seem to get "better"(?) Astro formatting if I change the language attribute to `lang="js"` -- look at the difference? Doesn't this seem more "Astro?"</p>
<Code code={layoutcode} lang="js" theme="material-darker" />

</main>
</BaseLayout>